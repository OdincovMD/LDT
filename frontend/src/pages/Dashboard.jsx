// pages/Dashboard.jsx
import React, { useEffect, useRef, useState, useMemo } from "react"
import { useSelector, useDispatch } from "react-redux"
import { useNavigationGuard } from "../hooks/useNavigationGuard"
import CaseSelector from "../components/CaseSelector"
import ModeSelector from "../components/ModeSelector"
import RecordingControls from "../components/RecordingControls"
import RealtimeLineChart from "../components/RealtimeLineChart"

import {
  startSimulation,        // backend: —Å—Ç–∞—Ä—Ç ¬´—Å–∏–º—É–ª—è—Ü–∏–∏¬ª = –Ω–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏
  stopSimulation,         // backend: —Å—Ç–æ–ø ¬´—Å–∏–º—É–ª—è—Ü–∏–∏¬ª = –∫–æ–Ω–µ—Ü –∑–∞–ø–∏—Å–∏
  loadHistoricalData,
  fetchLatestDataPoint,
  fetchPredictions,
  checkCaseHasData,
} from "../asyncActions/stream"

import {
  addDataPoint,
  setHistoricalData,
  clearData,
  setOperationMode,
  setCaseHasData,
} from "../store/streamSlice"

import Controls from "../components/Controls";

// === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
const WINDOW_SECONDS = 60 * 5
const POLL_MS = 1000
const RISK_THR = 0.7 // –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –ø–æ–¥—Å–≤–µ—Ç–∫–∏, –µ—Å–ª–∏ –±—ç–∫ –Ω–µ –≤–µ—Ä–Ω—É–ª alert

export default function Dashboard() {
  const dispatch = useDispatch()
  const [dataMode, setDataMode] = useState("demo");         // "demo" | "ws" | "sse"
  const [dataConnected, setDataConnected] = useState(false); // –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤
  const {
    currentCase,
    currentPatient,
    operationMode,     // 'playback' | 'record'
    recordingMode,     // 'idle' | 'recording' | 'reviewing'
    hasUnsavedChanges,
    dataPoints,
    historicalData,
    caseHasData,
  } = useSelector((s) => s.stream)

  const { user } = useSelector((s) => s.app)

  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ (–Ω–µ –º–µ—à–∞–µ–º —Å—Ç–æ—Ä—É —Å—á–∏—Ç–∞—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ)
  const [rawPoints, setRawPoints] = useState([])
  const [timeWindow, setTimeWindow] = useState([0, WINDOW_SECONDS])

  const pollRef = useRef(null)

  useNavigationGuard(hasUnsavedChanges)

  const parseTs = (t) => (typeof t === "string" ? new Date(t).getTime() / 1000 : t)

  // === –•–µ–ª–ø–µ—Ä: —Å–±—Ä–æ—Å –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞ ===
  const resetCharts = () => {
    setRawPoints([])
    setTimeWindow([0, WINDOW_SECONDS])
  }

  // === –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Ç—Ä–µ–≤–æ–≥–∏ (alert) ===
  const withAlert = (point, prediction) => {
    // –µ—Å–ª–∏ –±—ç–∫ –≤–µ—Ä–Ω—É–ª alert ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥
    const prob = prediction?.probability ?? point?.risk ?? 0
    const alert = typeof prediction?.alert !== "undefined"
      ? Number(Boolean(prediction.alert))
      : Number(prob >= RISK_THR)
    return { ...point, risk: prob, alert }
  }

  // === –°–ª–µ–¥–∏–º –∑–∞ –≤—ã–±–æ—Ä–æ–º –∫–µ–π—Å–∞: —É–∑–Ω–∞—ë–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ, –∏ —Å—Ç–∞–≤–∏–º —Ä–µ–∂–∏–º ===
  useEffect(() => {
    const run = async () => {
      if (!currentCase) return
      try {
        const has = await dispatch(checkCaseHasData(currentCase.id)).unwrap()
        dispatch(setCaseHasData(has))
        dispatch(setOperationMode(has ? "playback" : "record"))
      } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–µ–π—Å–∞:", e)
      }
    }
    run()
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [currentCase?.id])

  // === –ó–∞–≥—Ä—É–∑–∫–∞/–æ—á–∏—Å—Ç–∫–∞ —Ç–æ—á–µ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ ===
  useEffect(() => {
    const load = async () => {
      if (!currentCase) return
      if (operationMode === "playback") {
        try {
          const hist = await dispatch(loadHistoricalData(currentCase.id)).unwrap()
          dispatch(setHistoricalData(hist))
          const points = (hist || []).map((it) => ({
            t: parseTs(it.timestamp),
            bpm: it.bpm,
            uc: it.uc,
            risk: it.risk ?? 0,
            alert: Number(Boolean(it.alert)),
          }))
          setRawPoints(points)
          if (points.length) {
            setTimeWindow([points[0].t, points.at(-1).t])
          } else {
            setTimeWindow([0, WINDOW_SECONDS])
          }
        } catch (e) {
          console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:", e)
          setRawPoints([])
          setTimeWindow([0, WINDOW_SECONDS])
        }
      } else if (operationMode === "record") {
        // –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∑–∞–ø–∏—Å—å ‚Äî —á–∏—Å—Ç–∏–º –≥—Ä–∞—Ñ–∏–∫–∏
        resetCharts()
      }
    }
    load()
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [operationMode, currentCase?.id])

  // === –°—Ç–∞—Ä—Ç/—Å—Ç–æ–ø —Å–∏–º—É–ª—è—Ü–∏–∏ –Ω–∞ –±—ç–∫–µ –ø—Ä–∏ —Å–º–µ–Ω–µ recordingMode ===
  useEffect(() => {
    const apply = async () => {
      if (!currentCase) return

      // –ù–∞—á–∞–ª–∏ –∑–∞–ø–∏—Å—å
      if (operationMode === "record" && recordingMode === "recording" && !pollRef.current) {
        try {
          await dispatch(startSimulation({ caseId: currentCase.id, hz: 1 })).unwrap()
          // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–∏ + –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
          const tick = async () => {
            try {
              const [latest, pred] = await Promise.all([
                dispatch(fetchLatestDataPoint(currentCase.id)).unwrap(),
                dispatch(fetchPredictions(currentCase.id)).unwrap(),
              ])
              if (latest) {
                const point = {
                  t: parseTs(latest.timestamp),
                  bpm: latest.bpm,
                  uc: latest.uc,
                }
                const enriched = withAlert(point, pred)
                // –≤ —Å—Ç–æ—Ä ‚Äî —á—Ç–æ–±—ã –ø–æ–º–µ—á–∞—Ç—å ¬´–Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ¬ª
                dispatch(addDataPoint(enriched))
                // –ª–æ–∫–∞–ª—å–Ω–æ ‚Äî –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
                setRawPoints((prev) => {
                  const next = [...prev, enriched]
                  // –æ–±–Ω–æ–≤–ª—è–µ–º –æ–∫–Ω–æ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
                  const tNow = enriched.t
                  const tStart = Math.max(0, tNow - WINDOW_SECONDS)
                  setTimeWindow([tStart, tNow])
                  // –º–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–ª–∏–Ω—É –º–∞—Å—Å–∏–≤–∞, —á—Ç–æ–±—ã –Ω–µ –ø—É—Ö
                  const cutIdx = next.findIndex((p) => p.t >= tStart)
                  return cutIdx <= 0 ? next : next.slice(cutIdx)
                })
              }
            } catch (e) {
              console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–∏:", e)
            }
          }
          // –ø–µ—Ä–≤—ã–π —Ç–∏–∫ —Å—Ä–∞–∑—É, –¥–∞–ª–µ–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª
          await tick()
          pollRef.current = setInterval(tick, POLL_MS)
        } catch (e) {
          console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–ø–∏—Å–∏ (—Å–∏–º—É–ª—è—Ü–∏–∏):", e)
        }
      }

      // –û—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∑–∞–ø–∏—Å—å –∏–ª–∏ –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞
      if (!(operationMode === "record" && recordingMode === "recording") && pollRef.current) {
        clearInterval(pollRef.current)
        pollRef.current = null
        try {
          await dispatch(stopSimulation(currentCase.id)).unwrap()
        } catch (e) {
          // –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –º–æ–ª—á–∏–º –≤ –ª–æ–≥
          console.warn("–°—Ç–æ–ø –∑–∞–ø–∏—Å–∏ (—Å–∏–º—É–ª—è—Ü–∏–∏) –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º:", e)
        }
      }
    }
    apply()
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [operationMode, recordingMode, currentCase?.id])

  // === –ü—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ ‚Äî –ø–æ–¥—á–∏—Å—Ç–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏ –æ—Å—Ç–∞–Ω–æ–≤–∏–º –∑–∞–ø–∏—Å—å –Ω–∞ –±—ç–∫–µ ===
  useEffect(() => {
    return () => {
      if (pollRef.current) {
        clearInterval(pollRef.current)
        pollRef.current = null
      }
      if (currentCase) {
        // best-effort
        dispatch(stopSimulation(currentCase.id))
      }
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [])

  // === –í–∏–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥ —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ ===
  const displayData = useMemo(() => {
    const [t0, t1] = timeWindow
    return rawPoints.filter((p) => p.t >= t0 && p.t <= t1)
  }, [rawPoints, timeWindow])

  // === –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è ===
  const availableModes = useMemo(() => {
    if (!currentCase) return []
    return caseHasData ? ["playback"] : ["record"]
  }, [currentCase, caseHasData])

  const modeCaption = useMemo(() => {
    if (!currentPatient) return "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã"
    if (!currentCase) return "–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ"
    if (operationMode === "record") {
      return recordingMode === "recording"
        ? `üî¥ –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö: ${currentCase.description || `–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ #${currentCase.id}`}`
        : `‚è∏Ô∏è –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏: ${currentCase.description || `–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ #${currentCase.id}`}`
    }
    return `üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö: ${currentCase.description || `–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ #${currentCase.id}`}`
  }, [currentPatient, currentCase, operationMode, recordingMode])

  if (!user) {
    return (
      <div className="min-h-screen bg-white text-gray-900 flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-xl font-semibold mb-4 text-gray-900">–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</h2>
          <p className="text-gray-600">–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-white text-gray-900 p-4">
      <div className="max-w-6xl mx-auto space-y-4">
        <header className="flex items-center justify-between">
          <h1 className="text-2xl font-semibold text-gray-900">–ö–∞—Ä–¥–∏–æ—Ç–æ–∫–æ–≥—Ä–∞—Ñ–∏—è</h1>
        </header>

        {/* –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: —Å–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –î–µ–º–æ */}
        <div className="flex items-center justify-between bg-white border border-gray-200 rounded-2xl p-4 shadow-sm">
          <Controls
            connected={dataConnected}
            mode={dataMode}
            setMode={setDataMode}
            availableModes={["demo"]}
            onConnect={() => setDataConnected(true)}
            onDisconnect={() => setDataConnected(false)}
          />
        </div>

        <CaseSelector />

        <ModeSelector
          currentMode={operationMode}
          onModeChange={(mode) => dispatch(setOperationMode(mode))}
          disabled={!currentCase}
          availableModes={availableModes}
          caseHasData={caseHasData}
        />

        <RecordingControls />

        {currentCase ? (
          <>
          {/* –ß–°–° */}
        <section className="bg-white border border-gray-200 rounded-2xl p-4 shadow-sm">
          <div className="flex justify-between items-start mb-2">
            <h2 className="text-lg font-medium text-gray-900">–ß–°–° (—É–¥/–º–∏–Ω)</h2>
            <span className="font-semibold text-lg text-blue-600">
              {(rawPoints.at(-1)?.bpm ?? 0).toFixed(1)} bpm
            </span>
          </div>
          <div className="bg-slate-900 rounded-lg p-2 mt-2">
            <RealtimeLineChart
              data={displayData}
              timeWindow={timeWindow}
              series={[{ dataKey: "bpm", name: "–ß–°–°", type: "monotone", stroke: "#60A5FA" }]}
              yDynamic
              yClamp={[50, 210]}
              yLabel="bpm"
              height={200}
              isStatic={operationMode === "playback"}
              alertKey="alert"
            />
          </div>
        </section>

        {/* –ú–∞—Ç–æ—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å */}
        <section className="bg-white border border-gray-200 rounded-2xl p-4 shadow-sm">
          <div className="flex justify-between items-start mb-2">
            <h2 className="text-lg font-medium text-gray-900">–ú–∞—Ç–æ—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</h2>
            <span className="font-semibold text-lg text-green-600">
              {(rawPoints.at(-1)?.uc ?? 0).toFixed(1)}
            </span>
          </div>
          <div className="bg-slate-900 rounded-lg p-2 mt-2">
            <RealtimeLineChart
              data={displayData}
              timeWindow={timeWindow}
              series={[{ dataKey: "uc", name: "UC", type: "monotone", stroke: "#34D399" }]}
              yDynamic
              yClamp={[0, 50]}
              yLabel="UC"
              height={200}
              isStatic={operationMode === "playback"}
              alertKey="alert"
            />
          </div>
        </section>

        {/* –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–ª–æ–∂–Ω–µ–Ω–∏–π */}
        <section className="bg-white border border-gray-200 rounded-2xl p-4 shadow-sm">
          <div className="flex justify-between items-start mb-2">
            <h2 className="text-lg font-medium text-gray-900">–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–ª–æ–∂–Ω–µ–Ω–∏–π</h2>
            <span className="font-semibold text-lg text-red-600">
              {(rawPoints.at(-1)?.risk ?? 0).toFixed(2)}
            </span>
          </div>
          <div className="bg-slate-900 rounded-lg p-2 mt-2">
            <RealtimeLineChart
              data={displayData}
              timeWindow={timeWindow}
              series={[{ dataKey: "risk", name: "–†–∏—Å–∫", type: "monotone", stroke: "#F87171" }]}
              yDynamic
              yClamp={[0, 1]}
              yLabel="prob"
              referenceLines={[{ y: RISK_THR, stroke: "#FCA5A5" }]}
              height={200}
              isStatic={operationMode === "playback"}
              alertKey="alert"
            />
          </div>
        </section>
          </>
        ) : (
          <div className="bg-white border border-gray-200 rounded-2xl p-8 text-center shadow-sm">
            <div className="text-gray-600 text-lg">
              –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
            </div>
            <div className="text-gray-500 text-sm mt-2">
              –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            </div>
          </div>
        )}
      </div>
    </div>
  )
}
