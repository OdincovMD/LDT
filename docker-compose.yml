services:
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    environment:
      - HOST=${HOST}
      - NGINX_PORT=${NGINX_PORT}
      - BACKEND_PORT=${BACKEND_PORT}
      - FRONTEND_PORT=${FRONTEND_PORT}
    ports:
      - "${NGINX_PORT}:${NGINX_PORT}"
    depends_on:
      backend:
        condition: service_healthy
      ml:
        condition: service_healthy
    volumes:
      - ./nginx/nginx.conf.template:/etc/nginx/nginx.conf.template:ro
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - BACKEND_URL=${BACKEND_URL}
    environment:
      - NODE_ENV=development
      - WATCHPACK_POLLING=true
      - FRONTEND_PORT=${FRONTEND_PORT}
    expose:
      - "${FRONTEND_PORT}"
    depends_on:
      - backend
    networks:
      - app-network
    develop:
      watch:
        - action: sync
          path: ./frontend
          target: /app

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=5432
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_NAME=${DB_NAME}
      - ML_URL=${ML_URL}  
      - CSV_PATH=${CSV_PATH}
      - BACKEND_PORT=${BACKEND_PORT}               
    expose:
      - "${BACKEND_PORT}"
    depends_on:
      - postgres
      - ml
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${BACKEND_PORT}/health"]
      interval: 20s
      timeout: 5s
      retries: 2
      start_period: 3s
    networks:
      - app-network
    develop:
      watch:
        - action: sync
          path: ./backend
          target: /app
    volumes:
      - /opt/ctg-bridge/drop:/bridge_drop:rw

  ml:
    build:
      context: ./ml
      dockerfile: Dockerfile
    environment:
      - ML_PORT=${ML_PORT}
    expose:
      - "${ML_PORT}"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${ML_PORT}/health"]
      interval: 20s
      timeout: 5s
      retries: 2
      start_period: 3s
    networks:
      - app-network

  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    shm_size: 128mb
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}
    expose:
      - "5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data: